#!/bin/bash

set -e
set -u
set -o pipefail

SCRIPT_NAME=
SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-datadog-agent [OPTIONS]"
  echo
  echo "This script is used to configure and run datadog-agent on an AWS server."
  echo
  echo "Options:"
  echo
  echo -e "  --secrets-bucket-name\t\tAWS S3 secrets bucket name."
  echo -e "  --role\t\tInstance role."
  echo -e "  --enable-consul\t\tEnable Consul integration."
  echo
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  local -r name="$1"

  if [[ ! $(command -v "${name}") ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function get_object_value {
  local -r secrets_bucket_name="${1}"
  local -r role="${2}"
  local -r source="${role}/${3}"

  log_info "Downloading ${source}"

  aws s3 cp --quiet \
    "s3://${secrets_bucket_name}/${source}" /dev/stdout || return 1
}

function run {
  umask 022

  local role=""
  local secrets_bucket_name=""
  local enable_consul="false"

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --secrets-bucket-name)
        assert_not_empty "$key" "$2"
        secrets_bucket_name="$2"
        shift
        ;;
      --role)
        assert_not_empty "$key" "$2"
        role="$2"
        shift
        ;;
      --enable-consul)
        enable_consul="true"
        ;;
      # --api-key-path)
      #   assert_not_empty "$key" "$2"
      #   api_key_path="$2"
      #   shift
      #   ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--role" "${role}"
  assert_not_empty "--secrets-bucket-name" "${secrets_bucket_name}"

  assert_is_installed "systemctl"
  assert_is_installed "aws"

  local api_key

  api_key="$(get_object_value "${secrets_bucket_name}" "${role}" "datadog/api-key")"

  local -r datadog_yaml_path="/etc/datadog-agent/datadog.yaml"

  if grep -q "^api_key:" "${datadog_yaml_path}"
  then
    log_warn "Replacing datadog api key"
    sed -i "s/^api_key:.*/api_key: \"${api_key}\"/" "${datadog_yaml_path}"
  else
    log_info "Writing datadog api key"
    echo "api_key: \"${api_key}\"" >> "${datadog_yaml_path}"
  fi

  if [[ "${enable_consul}" == "true" ]]
  then
    local consul_conf
    local consul_acl_token=""
    local consul_acl_token_tmp
    local consul_conf_path="/etc/datadog-agent/conf.d/consul.d/conf.yaml"

    if consul_acl_token_tmp="$(get_object_value "${secrets_bucket_name}" "${role}" "consul/acl-token-telemetry.txt")"
    then
      consul_acl_token="acl_token: ${consul_acl_token_tmp}"
    fi

    consul_conf=$(cat <<EOF
init_config:

instances:
  - url: http://localhost:8500
    catalog_checks: false
    network_latency_checks: true
    self_leader_check: true
    use_prometheus_endpoint: true
    ${consul_acl_token}

EOF
)

    echo -e "${consul_conf}" > "${consul_conf_path}"
    chown dd-agent:dd-agent "${consul_conf_path}"
    chmod 640 "${consul_conf_path}"
  fi

  sudo systemctl daemon-reload
  sudo systemctl enable datadog-agent.service
  sudo systemctl restart datadog-agent.service
}

run "$@"
